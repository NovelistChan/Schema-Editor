{"ast":null,"code":"\"use strict\";\n\nvar _redux = require(\"redux\");\n\nvar _immer = require(\"immer\");\n\nvar _immer2 = _interopRequireDefault(_immer);\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nvar ActionSuffix = 'Action';\nvar typePrefix = 'Moox';\nvar CONFIG = {};\n\nfunction getType(modelName, actionName) {\n  return typePrefix + '/' + modelName + '/' + actionName;\n}\n\nfunction getActionByTypeName(type) {\n  return type.split('/');\n}\n\nfunction loadModel(name, model) {\n  var initialState = model.state;\n  model.$name = name;\n  return function reducer() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n    var action = arguments[1];\n    var params = action.params;\n    var types = getActionByTypeName(action.type);\n\n    if (types[0] !== typePrefix) {\n      return state;\n    } else if (types[1] !== model.$name) {\n      return state;\n    }\n\n    var actionFn = types[2];\n\n    if (model[actionFn]) {\n      if (CONFIG.immer && model.immer !== false) {\n        return (0, _immer2.default)(state, function (draftState) {\n          return model[actionFn](draftState, params, state);\n        });\n      }\n\n      return model[actionFn](state, params);\n    }\n\n    return state;\n  };\n}\n\nfunction loadActions(name, model) {\n  var store = this;\n  var keys = Object.keys(model);\n  var actions = {};\n  keys.forEach(function (item) {\n    var len = item.length;\n\n    if (item.substr(len - 6) === ActionSuffix) {\n      actions[item] = function actionCreator(params) {\n        return store.dispatch({\n          type: getType(name, item),\n          params: params\n        });\n      };\n    }\n  });\n  return actions;\n}\n\nvar defaultMiddleware = [];\n\nfunction moox(models) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var MOOX = {};\n  var reducers = {};\n  var store = void 0;\n  var keys = Object.keys(models);\n  (0, _utils.extend)(CONFIG, {\n    middleware: [],\n    immer: true\n  }, config);\n  keys.forEach(function (name) {\n    reducers[name] = loadModel(name, models[name]);\n  });\n\n  MOOX.getReducers = function () {\n    return reducers;\n  };\n\n  var middleware = defaultMiddleware.concat(CONFIG.middleware);\n  store = _redux.applyMiddleware.apply(undefined, _toConsumableArray(middleware))(_redux.createStore)((0, _redux.combineReducers)(reducers), CONFIG.preloadedState, CONFIG.enhancer);\n\n  MOOX.getStore = function () {\n    return store;\n  };\n\n  MOOX.getState = function () {\n    return store.getState();\n  };\n\n  keys.forEach(function (name) {\n    MOOX[name] = loadActions.call(store, name, models[name]);\n  });\n  return MOOX;\n}\n\nmodule.exports = moox;","map":null,"metadata":{},"sourceType":"script"}