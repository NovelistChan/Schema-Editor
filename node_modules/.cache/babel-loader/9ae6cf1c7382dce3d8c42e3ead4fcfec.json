{"ast":null,"code":"// Modules\nvar Type = require('type-of-is'); // Constants\n\n\nvar DRAFT = 'http://json-schema.org/draft-04/schema#';\n\nfunction getPropertyFormat(value) {\n  var type = Type.string(value).toLowerCase();\n  if (type === 'date') return 'date-time';\n  return null;\n}\n\nfunction getPropertyType(value) {\n  var type = Type.string(value).toLowerCase();\n  if (type === 'date') return 'string';\n  if (type === 'regexp') return 'string';\n  if (type === 'function') return 'string';\n  return type;\n}\n\nfunction getUniqueKeys(a, b, c) {\n  a = Object.keys(a);\n  b = Object.keys(b);\n  c = c || [];\n  var value;\n  var cIndex;\n  var aIndex;\n\n  for (var keyIndex = 0, keyLength = b.length; keyIndex < keyLength; keyIndex++) {\n    value = b[keyIndex];\n    aIndex = a.indexOf(value);\n    cIndex = c.indexOf(value);\n\n    if (aIndex === -1) {\n      if (cIndex !== -1) {\n        // Value is optional, it doesn't exist in A but exists in B(n)\n        c.splice(cIndex, 1);\n      }\n    } else if (cIndex === -1) {\n      // Value is required, it exists in both B and A, and is not yet present in C\n      c.push(value);\n    }\n  }\n\n  return c;\n}\n\nfunction processArray(array, output, nested) {\n  var format;\n  var oneOf;\n  var type;\n\n  if (nested && output) {\n    output = {\n      items: output\n    };\n  } else {\n    output = output || {};\n    output.type = getPropertyType(array);\n    output.items = output.items || {};\n    type = output.items.type || null;\n  } // Determine whether each item is different\n\n\n  for (var arrIndex = 0, arrLength = array.length; arrIndex < arrLength; arrIndex++) {\n    var elementType = getPropertyType(array[arrIndex]);\n    var elementFormat = getPropertyFormat(array[arrIndex]);\n\n    if (type && elementType !== type) {\n      output.items.oneOf = [];\n      oneOf = true;\n      break;\n    } else {\n      type = elementType;\n      format = elementFormat;\n    }\n  } // Setup type otherwise\n\n\n  if (!oneOf && type) {\n    output.items.type = type;\n\n    if (format) {\n      output.items.format = format;\n    }\n  } else if (oneOf && type !== 'object') {\n    output.items = {\n      oneOf: [{\n        type: type\n      }],\n      required: output.items.required\n    };\n  } // Process each item depending\n\n\n  if (typeof output.items.oneOf !== 'undefined' || type === 'object') {\n    for (var itemIndex = 0, itemLength = array.length; itemIndex < itemLength; itemIndex++) {\n      var value = array[itemIndex];\n      var itemType = getPropertyType(value);\n      var itemFormat = getPropertyFormat(value);\n      var arrayItem;\n\n      if (itemType === 'object') {\n        if (output.items.properties) {\n          output.items.required = getUniqueKeys(output.items.properties, value, output.items.required);\n        }\n\n        arrayItem = processObject(value, oneOf ? {} : output.items.properties, true);\n      } else if (itemType === 'array') {\n        arrayItem = processArray(value, oneOf ? {} : output.items.properties, true);\n      } else {\n        arrayItem = {};\n        arrayItem.type = itemType;\n\n        if (itemFormat) {\n          arrayItem.format = itemFormat;\n        }\n      }\n\n      if (oneOf) {\n        var childType = Type.string(value).toLowerCase();\n        var tempObj = {};\n\n        if (!arrayItem.type && childType === 'object') {\n          tempObj.properties = arrayItem;\n          tempObj.type = 'object';\n          arrayItem = tempObj;\n        }\n\n        output.items.oneOf.push(arrayItem);\n      } else {\n        if (output.items.type !== 'object') {\n          continue;\n        }\n\n        output.items.properties = arrayItem;\n      }\n    }\n  }\n\n  return nested ? output.items : output;\n}\n\nfunction processObject(object, output, nested) {\n  if (nested && output) {\n    output = {\n      properties: output\n    };\n  } else {\n    output = output || {};\n    output.type = getPropertyType(object);\n    output.properties = output.properties || {};\n  }\n\n  for (var key in object) {\n    var value = object[key];\n    var type = getPropertyType(value);\n    var format = getPropertyFormat(value);\n    type = type === 'undefined' ? 'null' : type;\n\n    if (type === 'object') {\n      output.properties[key] = processObject(value, output.properties[key]);\n      continue;\n    }\n\n    if (type === 'array') {\n      output.properties[key] = processArray(value, output.properties[key]);\n      continue;\n    }\n\n    if (output.properties[key]) {\n      var entry = output.properties[key];\n      var hasTypeArray = Array.isArray(entry.type); // When an array already exists, we check the existing\n      // type array to see if it contains our current property\n      // type, if not, we add it to the array and continue\n\n      if (hasTypeArray && entry.type.indexOf(type) < 0) {\n        entry.type.push(type);\n      } // When multiple fields of differing types occur,\n      // json schema states that the field must specify the\n      // primitive types the field allows in array format.\n\n\n      if (!hasTypeArray && entry.type !== type) {\n        entry.type = [entry.type, type];\n      }\n\n      continue;\n    }\n\n    output.properties[key] = {};\n    output.properties[key].type = type;\n\n    if (format) {\n      output.properties[key].format = format;\n    }\n  }\n\n  return nested ? output.properties : output;\n}\n\nmodule.exports = function Process(title, object) {\n  var processOutput;\n  var output = {\n    $schema: DRAFT\n  }; // Determine title exists\n\n  if (typeof title !== 'string') {\n    object = title;\n    title = undefined;\n  } else {\n    output.title = title;\n  } // Set initial object type\n\n\n  output.type = Type.string(object).toLowerCase(); // Process object\n\n  if (output.type === 'object') {\n    processOutput = processObject(object);\n    output.type = processOutput.type;\n    output.properties = processOutput.properties;\n  }\n\n  if (output.type === 'array') {\n    processOutput = processArray(object);\n    output.type = processOutput.type;\n    output.items = processOutput.items;\n\n    if (output.title) {\n      output.items.title = output.title;\n      output.title += ' Set';\n    }\n  } // Output\n\n\n  return output;\n};","map":null,"metadata":{},"sourceType":"script"}