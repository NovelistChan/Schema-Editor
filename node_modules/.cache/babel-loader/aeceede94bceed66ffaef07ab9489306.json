{"ast":null,"code":"import _defineProperty from \"/Users/novelistchan/Documents/sddm-component/json-schema-editor/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/novelistchan/Documents/sddm-component/json-schema-editor/src/components/editor/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport App from './App.js';\nimport utils from './utils';\nimport moox from 'moox';\nimport schema from './models/schema';\nimport PropTypes from 'prop-types';\nimport 'antd/dist/antd.css';\n\nfunction editor(config = {}) {\n  if (config.lang) utils.lang = config.lang;\n\n  if (config.defaultSchema) {\n    var type;\n\n    for (type in config.defaultSchema) {\n      if (utils.SCHEMA_TYPE.indexOf(type) === -1) {\n        utils.SCHEMA_TYPE.push(type);\n      }\n    }\n\n    utils.defaultSchema = _objectSpread({}, utils.defaultSchema, {}, config.defaultSchema);\n  }\n\n  const Model = moox({\n    schema\n  });\n\n  if (config.format) {\n    Model.__jsonSchemaFormat = config.format;\n  } else {\n    Model.__jsonSchemaFormat = utils.format;\n  }\n\n  if (config.mock) {\n    Model.__jsonSchemaMock = config.mock;\n  }\n\n  const store = Model.getStore();\n\n  const Component = props => {\n    return React.createElement(Provider, {\n      store: store,\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(App, Object.assign({\n      Model: Model\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    })));\n  };\n\n  Component.propTypes = {\n    data: PropTypes.string,\n    onChange: PropTypes.func,\n    showEditor: PropTypes.bool,\n    metaSchema: PropTypes.array // 自定义meta schema\n\n  };\n  Component.defaultProps = {\n    metaSchema: utils.SCHEMA_TYPE,\n    showEditor: false\n  };\n  return Component;\n}\n\nexport default function (options) {\n  let config = {\n    defaultSchema: {}\n  };\n  let templates = {};\n\n  for (const property in options.extensions) {\n    config.defaultSchema[property] = options.extensions[property].schema;\n    templates[property] = options.extensions[property].template;\n  }\n\n  const Editor = editor(config);\n\n  let advancedTemplate = (data, context) => {\n    const Template = templates[data.type] || null;\n    return React.createElement(Template, {\n      data: data,\n      context: context,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    });\n  };\n\n  return React.createElement(Editor, Object.assign({}, options, {\n    advancedTemplate: advancedTemplate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/novelistchan/Documents/sddm-component/json-schema-editor/src/components/editor/index.js"],"names":["React","Provider","App","utils","moox","schema","PropTypes","editor","config","lang","defaultSchema","type","SCHEMA_TYPE","indexOf","push","Model","format","__jsonSchemaFormat","mock","__jsonSchemaMock","store","getStore","Component","props","propTypes","data","string","onChange","func","showEditor","bool","metaSchema","array","defaultProps","options","templates","property","extensions","template","Editor","advancedTemplate","context","Template"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,oBAAP;;AAEA,SAASC,MAAT,CAAgBC,MAAM,GAAG,EAAzB,EAA6B;AAC3B,MAAIA,MAAM,CAACC,IAAX,EAAiBN,KAAK,CAACM,IAAN,GAAaD,MAAM,CAACC,IAApB;;AAEjB,MAAID,MAAM,CAACE,aAAX,EAA0B;AACxB,QAAIC,IAAJ;;AACA,SAAKA,IAAL,IAAaH,MAAM,CAACE,aAApB,EAAmC;AACjC,UAAIP,KAAK,CAACS,WAAN,CAAkBC,OAAlB,CAA0BF,IAA1B,MAAoC,CAAC,CAAzC,EAA4C;AAC1CR,QAAAA,KAAK,CAACS,WAAN,CAAkBE,IAAlB,CAAuBH,IAAvB;AACD;AACF;;AACDR,IAAAA,KAAK,CAACO,aAAN,qBACKP,KAAK,CAACO,aADX,MAEKF,MAAM,CAACE,aAFZ;AAID;;AAED,QAAMK,KAAK,GAAGX,IAAI,CAAC;AACjBC,IAAAA;AADiB,GAAD,CAAlB;;AAGA,MAAIG,MAAM,CAACQ,MAAX,EAAmB;AACjBD,IAAAA,KAAK,CAACE,kBAAN,GAA2BT,MAAM,CAACQ,MAAlC;AACD,GAFD,MAEO;AACLD,IAAAA,KAAK,CAACE,kBAAN,GAA2Bd,KAAK,CAACa,MAAjC;AACD;;AAED,MAAIR,MAAM,CAACU,IAAX,EAAiB;AACfH,IAAAA,KAAK,CAACI,gBAAN,GAAyBX,MAAM,CAACU,IAAhC;AACD;;AAGD,QAAME,KAAK,GAAGL,KAAK,CAACM,QAAN,EAAd;;AAEA,QAAMC,SAAS,GAAIC,KAAD,IAAW;AAC3B,WACE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEH,KAAjB;AAAwB,MAAA,SAAS,EAAC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAEL;AAAZ,OAAuBQ,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF;AAKD,GAND;;AAQAD,EAAAA,SAAS,CAACE,SAAV,GAAsB;AACpBC,IAAAA,IAAI,EAAEnB,SAAS,CAACoB,MADI;AAEpBC,IAAAA,QAAQ,EAAErB,SAAS,CAACsB,IAFA;AAGpBC,IAAAA,UAAU,EAAEvB,SAAS,CAACwB,IAHF;AAIpBC,IAAAA,UAAU,EAAEzB,SAAS,CAAC0B,KAJF,CAIS;;AAJT,GAAtB;AAOAV,EAAAA,SAAS,CAACW,YAAV,GAAyB;AACvBF,IAAAA,UAAU,EAAE5B,KAAK,CAACS,WADK;AAEvBiB,IAAAA,UAAU,EAAE;AAFW,GAAzB;AAKA,SAAOP,SAAP;AAED;;AAED,eAAe,UAAUY,OAAV,EAAmB;AAEhC,MAAI1B,MAAM,GAAG;AACXE,IAAAA,aAAa,EAAE;AADJ,GAAb;AAMA,MAAIyB,SAAS,GAAG,EAAhB;;AACA,OAAK,MAAMC,QAAX,IAAuBF,OAAO,CAACG,UAA/B,EAA2C;AACzC7B,IAAAA,MAAM,CAACE,aAAP,CAAqB0B,QAArB,IAAiCF,OAAO,CAACG,UAAR,CAAmBD,QAAnB,EAA6B/B,MAA9D;AACA8B,IAAAA,SAAS,CAACC,QAAD,CAAT,GAAsBF,OAAO,CAACG,UAAR,CAAmBD,QAAnB,EAA6BE,QAAnD;AACD;;AAED,QAAMC,MAAM,GAAGhC,MAAM,CAACC,MAAD,CAArB;;AAEA,MAAIgC,gBAAgB,GAAG,CAACf,IAAD,EAAOgB,OAAP,KAAmB;AACxC,UAAMC,QAAQ,GAAGP,SAAS,CAACV,IAAI,CAACd,IAAN,CAAT,IAAwB,IAAzC;AACA,WAAO,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAEc,IAAhB;AAAsB,MAAA,OAAO,EAAEgB,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAHD;;AAKA,SAAO,oBAAC,MAAD,oBAAYP,OAAZ;AAAqB,IAAA,gBAAgB,EAAEM,gBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD","sourcesContent":["import React from 'react'\nimport { Provider } from 'react-redux'\nimport App from './App.js'\nimport utils from './utils'\nimport moox from 'moox'\nimport schema from './models/schema'\nimport PropTypes from 'prop-types'\nimport 'antd/dist/antd.css'\n\nfunction editor(config = {}) {\n  if (config.lang) utils.lang = config.lang;\n\n  if (config.defaultSchema) {\n    var type;\n    for (type in config.defaultSchema) {\n      if (utils.SCHEMA_TYPE.indexOf(type) === -1) {\n        utils.SCHEMA_TYPE.push(type)\n      }\n    }\n    utils.defaultSchema = {\n      ...utils.defaultSchema,\n      ...config.defaultSchema,\n    };\n  }\n\n  const Model = moox({\n    schema\n  })\n  if (config.format) {\n    Model.__jsonSchemaFormat = config.format\n  } else {\n    Model.__jsonSchemaFormat = utils.format\n  }\n\n  if (config.mock) {\n    Model.__jsonSchemaMock = config.mock\n  }\n\n\n  const store = Model.getStore();\n\n  const Component = (props) => {\n    return (\n      <Provider store={store} className=\"wrapper\">\n        <App Model={Model} {...props} />\n      </Provider>\n    )\n  }\n\n  Component.propTypes = {\n    data: PropTypes.string,\n    onChange: PropTypes.func,\n    showEditor: PropTypes.bool,\n    metaSchema: PropTypes.array, // 自定义meta schema\n  }\n\n  Component.defaultProps = {\n    metaSchema: utils.SCHEMA_TYPE,\n    showEditor: false,\n  }\n\n  return Component;\n\n}\n\nexport default function (options) {\n\n  let config = {\n    defaultSchema: {\n\n    }\n  }\n\n  let templates = {}\n  for (const property in options.extensions) {\n    config.defaultSchema[property] = options.extensions[property].schema\n    templates[property] = options.extensions[property].template\n  }\n\n  const Editor = editor(config)\n\n  let advancedTemplate = (data, context) => {\n    const Template = templates[data.type] || null\n    return <Template data={data} context={context} />\n  }\n\n  return <Editor {...options} advancedTemplate={advancedTemplate} />\n}\n"]},"metadata":{},"sourceType":"module"}