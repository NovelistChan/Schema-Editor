{"ast":null,"code":"(function (factory) {\n  if (typeof exports == 'object') {\n    module.exports = factory();\n  } else if (typeof define == 'function' && define.amd) {\n    define(factory);\n  }\n})(function () {\n  var isBuiltIn = function () {\n    var built_ins = [Object, Function, Array, String, Boolean, Number, Date, RegExp, Error];\n    var built_ins_length = built_ins.length;\n    return function (_constructor) {\n      for (var i = 0; i < built_ins_length; i++) {\n        if (built_ins[i] === _constructor) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n  }();\n\n  var stringType = function () {\n    var _toString = {}.toString;\n    return function (obj) {\n      // [object Blah] -> Blah\n      var stype = _toString.call(obj).slice(8, -1);\n\n      if (obj === null || obj === undefined) {\n        return stype.toLowerCase();\n      }\n\n      var ctype = of(obj);\n\n      if (ctype && !isBuiltIn(ctype)) {\n        return ctype.name;\n      } else {\n        return stype;\n      }\n    };\n  }();\n\n  function of(obj) {\n    if (obj === null || obj === undefined) {\n      return obj;\n    } else {\n      return obj.constructor;\n    }\n  }\n\n  function is(obj, test) {\n    var typer = of(test) === String ? stringType : of;\n    return typer(obj) === test;\n  }\n\n  function instance(obj, test) {\n    return obj instanceof test;\n  }\n\n  function extension(_Extension, _Base) {\n    return instance(_Extension.prototype, _Base);\n  }\n\n  function any(obj, tests) {\n    if (!is(tests, Array)) {\n      throw \"Second argument to .any() should be array\";\n    }\n\n    for (var i = 0; i < tests.length; i++) {\n      var test = tests[i];\n\n      if (is(obj, test)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  var exports = function (obj, type) {\n    if (arguments.length == 1) {\n      return of(obj);\n    } else {\n      if (is(type, Array)) {\n        return any(obj, type);\n      } else {\n        return is(obj, type);\n      }\n    }\n  };\n\n  exports.instance = instance;\n  exports.string = stringType;\n  exports.of = of;\n  exports.is = is;\n  exports.any = any;\n  exports.extension = extension;\n  return exports;\n});","map":null,"metadata":{},"sourceType":"script"}