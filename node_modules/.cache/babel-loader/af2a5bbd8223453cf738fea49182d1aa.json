{"ast":null,"code":"import utils from '../utils';\nimport handleSchema from '../schema.js';\nlet fieldNum = 1;\n\nconst _ = require('underscore');\n\nexport default {\n  state: {\n    message: null,\n    data: {\n      title: '',\n      type: 'object',\n      properties: {},\n      required: []\n    },\n    open: {\n      properties: true\n    }\n  },\n  changeEditorSchemaAction: function (state, action) {\n    handleSchema(action.value);\n    state.data = action.value;\n  },\n  changeNameAction: function (state, action, oldState) {\n    const keys = action.prefix;\n    const name = action.name;\n    const value = action.value;\n    let oldData = oldState.data;\n    let parentKeys = utils.getParentKeys(keys);\n    let parentData = utils.getData(oldData, parentKeys);\n    let requiredData = [].concat(parentData.required || []);\n    let propertiesData = utils.getData(oldData, keys);\n    let newPropertiesData = {};\n    let curData = propertiesData[name];\n    let openKeys = [].concat(keys, value, 'properties').join(utils.JSONPATH_JOIN_CHAR);\n    let oldOpenKeys = [].concat(keys, name, 'properties').join(utils.JSONPATH_JOIN_CHAR);\n\n    if (curData.properties) {\n      delete state.open[oldOpenKeys];\n      state.open[openKeys] = true;\n    }\n\n    if (propertiesData[value] && typeof propertiesData[value] === 'object') {\n      return;\n    }\n\n    requiredData = requiredData.map(item => {\n      if (item === name) return value;\n      return item;\n    });\n    parentKeys.push('required');\n    utils.setData(state.data, parentKeys, requiredData);\n\n    for (let i in propertiesData) {\n      if (i === name) {\n        newPropertiesData[value] = propertiesData[i];\n      } else newPropertiesData[i] = propertiesData[i];\n    }\n\n    utils.setData(state.data, keys, newPropertiesData);\n  },\n  changeValueAction: function (state, action) {\n    const keys = action.key;\n\n    if (action.value) {\n      utils.setData(state.data, keys, action.value);\n    } else {\n      utils.deleteData(state.data, keys);\n    }\n  },\n  changeTypeAction: function (state, action, oldState) {\n    const keys = action.key;\n    const value = action.value;\n    let parentKeys = utils.getParentKeys(keys);\n    let oldData = oldState.data;\n    let parentData = utils.getData(oldData, parentKeys);\n\n    if (parentData.type === value && !parentData.customized) {\n      return;\n    } // let newParentData = utils.defaultSchema[value];\n\n\n    let newParentDataItem = utils.defaultSchema[value]; // 将备注过滤出来\n\n    let parentDataItem = parentData.description ? {\n      description: parentData.description\n    } : {};\n    let newParentData = Object.assign({}, newParentDataItem, parentDataItem);\n    let newKeys = [].concat('data', parentKeys);\n    utils.setData(state, newKeys, newParentData);\n  },\n  enableRequireAction: function (state, action, oldState) {\n    const keys = action.prefix;\n    let parentKeys = utils.getParentKeys(keys);\n    let oldData = oldState.data;\n    let parentData = utils.getData(oldData, parentKeys);\n    let requiredData = [].concat(parentData.required || []);\n    let index = requiredData.indexOf(action.name);\n\n    if (!action.required && index >= 0) {\n      requiredData.splice(index, 1);\n      parentKeys.push('required');\n\n      if (requiredData.length === 0) {\n        utils.deleteData(state.data, parentKeys);\n      } else {\n        utils.setData(state.data, parentKeys, requiredData);\n      }\n    } else if (action.required && index === -1) {\n      requiredData.push(action.name);\n      parentKeys.push('required');\n      utils.setData(state.data, parentKeys, requiredData);\n    }\n  },\n  requireAllAction: function (state, action, oldState) {\n    // let oldData = oldState.data;\n    let data = utils.cloneObject(action.value);\n    utils.handleSchemaRequired(data, action.required);\n    state.data = data;\n  },\n  deleteItemAction: function (state, action, oldState) {\n    const keys = action.key;\n    let name = keys[keys.length - 1];\n    let oldData = oldState.data;\n    let parentKeys = utils.getParentKeys(keys);\n    let parentData = utils.getData(oldData, parentKeys);\n    let newParentData = {};\n\n    for (let i in parentData) {\n      if (i !== name) {\n        newParentData[i] = parentData[i];\n      }\n    }\n\n    utils.setData(state.data, parentKeys, newParentData);\n  },\n  addFieldAction: function (state, action, oldState) {\n    const keys = action.prefix;\n    let oldData = oldState.data;\n    let name = action.name;\n    let propertiesData = utils.getData(oldData, keys);\n    let newPropertiesData = {};\n    let parentKeys = utils.getParentKeys(keys);\n    let parentData = utils.getData(oldData, parentKeys);\n    let requiredData = [].concat(parentData.required || []);\n\n    if (!name) {\n      newPropertiesData = Object.assign({}, propertiesData);\n      let ranName = 'field_' + fieldNum++;\n      newPropertiesData[ranName] = utils.defaultSchema.string;\n      requiredData.push(ranName);\n    } else {\n      for (let i in propertiesData) {\n        newPropertiesData[i] = propertiesData[i];\n\n        if (i === name) {\n          let ranName = 'field_' + fieldNum++;\n          newPropertiesData[ranName] = utils.defaultSchema.string;\n          requiredData.push(ranName);\n        }\n      }\n    }\n\n    utils.setData(state.data, keys, newPropertiesData); // add required\n\n    parentKeys.push('required');\n    utils.setData(state.data, parentKeys, requiredData);\n  },\n  addChildFieldAction: function (state, action, oldState) {\n    const keys = action.key;\n    let oldData = oldState.data;\n    let propertiesData = utils.getData(oldData, keys);\n    let newPropertiesData = {};\n    newPropertiesData = Object.assign({}, propertiesData);\n    let ranName = 'field_' + fieldNum++;\n    newPropertiesData[ranName] = utils.defaultSchema.string;\n    utils.setData(state.data, keys, newPropertiesData); // add required\n\n    let parentKeys = utils.getParentKeys(keys);\n    let parentData = utils.getData(oldData, parentKeys);\n    let requiredData = [].concat(parentData.required || []);\n    requiredData.push(ranName);\n    parentKeys.push('required');\n    utils.setData(state.data, parentKeys, requiredData);\n  },\n  setOpenValueAction: function (state, action, oldState) {\n    const keys = action.key.join(utils.JSONPATH_JOIN_CHAR);\n    let status;\n\n    if (_.isUndefined(action.value)) {\n      status = utils.getData(oldState.open, [keys]) ? false : true;\n    } else {\n      status = action.value;\n    }\n\n    utils.setData(state.open, [keys], status);\n  }\n};","map":{"version":3,"sources":["/Users/novelistchan/Documents/sddm-component/json-schema-editor/src/components/editor/models/schema.js"],"names":["utils","handleSchema","fieldNum","_","require","state","message","data","title","type","properties","required","open","changeEditorSchemaAction","action","value","changeNameAction","oldState","keys","prefix","name","oldData","parentKeys","getParentKeys","parentData","getData","requiredData","concat","propertiesData","newPropertiesData","curData","openKeys","join","JSONPATH_JOIN_CHAR","oldOpenKeys","map","item","push","setData","i","changeValueAction","key","deleteData","changeTypeAction","customized","newParentDataItem","defaultSchema","parentDataItem","description","newParentData","Object","assign","newKeys","enableRequireAction","index","indexOf","splice","length","requireAllAction","cloneObject","handleSchemaRequired","deleteItemAction","addFieldAction","ranName","string","addChildFieldAction","setOpenValueAction","status","isUndefined"],"mappings":"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","sourcesContent":["import utils from '../utils';\n\nimport handleSchema from '../schema.js';\nlet fieldNum = 1;\nconst _ = require('underscore');\n\nexport default {\n  state: {\n    message: null,\n    data: {\n      title: '',\n      type: 'object',\n      properties: {},\n      required: []\n    },\n    open: {\n      properties: true\n    },\n  },\n\n  changeEditorSchemaAction: function(state, action) {\n    handleSchema(action.value);\n    state.data = action.value;\n  },\n\n  changeNameAction: function(state, action, oldState) {\n    const keys = action.prefix;\n    const name = action.name;\n    const value = action.value;\n    let oldData = oldState.data;\n    let parentKeys = utils.getParentKeys(keys);\n    let parentData = utils.getData(oldData, parentKeys);\n    let requiredData = [].concat(parentData.required || []);\n    let propertiesData = utils.getData(oldData, keys);\n    let newPropertiesData = {};\n\n    let curData = propertiesData[name];\n    let openKeys = [].concat(keys, value, 'properties').join(utils.JSONPATH_JOIN_CHAR);\n    let oldOpenKeys = [].concat(keys, name, 'properties').join(utils.JSONPATH_JOIN_CHAR);\n    if (curData.properties) {\n      delete state.open[oldOpenKeys];\n      state.open[openKeys] = true;\n    }\n\n    if (propertiesData[value] && typeof propertiesData[value] === 'object') {\n      return;\n    }\n\n    requiredData = requiredData.map(item => {\n      if (item === name) return value;\n      return item;\n    });\n\n    parentKeys.push('required');\n    utils.setData(state.data, parentKeys, requiredData);\n\n    for (let i in propertiesData) {\n      if (i === name) {\n        newPropertiesData[value] = propertiesData[i];\n      } else newPropertiesData[i] = propertiesData[i];\n    }\n\n    utils.setData(state.data, keys, newPropertiesData);\n  },\n\n  changeValueAction: function(state, action) {\n    const keys = action.key;\n    if (action.value) {\n      utils.setData(state.data, keys, action.value);\n    } else {\n      utils.deleteData(state.data, keys);\n    }\n  },\n\n  changeTypeAction: function(state, action, oldState) {\n    const keys = action.key;\n    const value = action.value;\n\n    let parentKeys = utils.getParentKeys(keys);\n    let oldData = oldState.data;\n    let parentData = utils.getData(oldData, parentKeys);\n    if (parentData.type === value && !parentData.customized) {\n      return;\n    }\n    // let newParentData = utils.defaultSchema[value];\n    let newParentDataItem = utils.defaultSchema[value];\n\n    // 将备注过滤出来\n    let parentDataItem = parentData.description ? { description: parentData.description } : {};\n    let newParentData = Object.assign({}, newParentDataItem, parentDataItem);\n\n    let newKeys = [].concat('data', parentKeys);\n    utils.setData(state, newKeys, newParentData);\n  },\n\n  enableRequireAction: function(state, action, oldState) {\n    const keys = action.prefix;\n    let parentKeys = utils.getParentKeys(keys);\n    let oldData = oldState.data;\n    let parentData = utils.getData(oldData, parentKeys);\n    let requiredData = [].concat(parentData.required || []);\n    let index = requiredData.indexOf(action.name);\n\n    if (!action.required && index >= 0) {\n      requiredData.splice(index, 1);\n      parentKeys.push('required');\n      if (requiredData.length === 0) {\n        utils.deleteData(state.data, parentKeys);\n      } else {\n        utils.setData(state.data, parentKeys, requiredData);\n      }\n    } else if (action.required && index === -1) {\n      requiredData.push(action.name);\n      parentKeys.push('required');\n      utils.setData(state.data, parentKeys, requiredData);\n    }\n  },\n\n  requireAllAction: function(state, action, oldState) {\n    // let oldData = oldState.data;\n    let data = utils.cloneObject(action.value);\n    utils.handleSchemaRequired(data, action.required);\n\n    state.data = data;\n  },\n\n  deleteItemAction: function(state, action, oldState) {\n    const keys = action.key;\n\n    let name = keys[keys.length - 1];\n    let oldData = oldState.data;\n    let parentKeys = utils.getParentKeys(keys);\n    let parentData = utils.getData(oldData, parentKeys);\n    let newParentData = {};\n    for (let i in parentData) {\n      if (i !== name) {\n        newParentData[i] = parentData[i];\n      }\n    }\n\n    utils.setData(state.data, parentKeys, newParentData);\n  },\n\n  addFieldAction: function(state, action, oldState) {\n    const keys = action.prefix;\n    let oldData = oldState.data;\n    let name = action.name;\n    let propertiesData = utils.getData(oldData, keys);\n    let newPropertiesData = {};\n\n    let parentKeys = utils.getParentKeys(keys);\n    let parentData = utils.getData(oldData, parentKeys);\n    let requiredData = [].concat(parentData.required || []);\n\n    if (!name) {\n      newPropertiesData = Object.assign({}, propertiesData);\n      let ranName = 'field_' + fieldNum++;\n      newPropertiesData[ranName] = utils.defaultSchema.string;\n      requiredData.push(ranName);\n    } else {\n      for (let i in propertiesData) {\n        newPropertiesData[i] = propertiesData[i];\n        if (i === name) {\n          let ranName = 'field_' + fieldNum++;\n          newPropertiesData[ranName] = utils.defaultSchema.string;\n          requiredData.push(ranName);\n        }\n      }\n    }\n    utils.setData(state.data, keys, newPropertiesData);\n    // add required\n    parentKeys.push('required');\n    utils.setData(state.data, parentKeys, requiredData);\n  },\n\n  addChildFieldAction: function(state, action, oldState) {\n    const keys = action.key;\n    let oldData = oldState.data;\n    let propertiesData = utils.getData(oldData, keys);\n    let newPropertiesData = {};\n\n    newPropertiesData = Object.assign({}, propertiesData);\n    let ranName = 'field_' + fieldNum++;\n    newPropertiesData[ranName] = utils.defaultSchema.string;\n    utils.setData(state.data, keys, newPropertiesData);\n\n    // add required\n    let parentKeys = utils.getParentKeys(keys);\n    let parentData = utils.getData(oldData, parentKeys);\n    let requiredData = [].concat(parentData.required || []);\n    requiredData.push(ranName);\n    parentKeys.push('required');\n    utils.setData(state.data, parentKeys, requiredData);\n  },\n\n  setOpenValueAction: function(state, action, oldState) {\n    const keys = action.key.join(utils.JSONPATH_JOIN_CHAR);\n\n    let status;\n    if (_.isUndefined(action.value)) {\n      status = utils.getData(oldState.open, [keys]) ? false : true;\n    } else {\n      status = action.value;\n    }\n    utils.setData(state.open, [keys], status);\n  },\n\n};\n"]},"metadata":{},"sourceType":"module"}