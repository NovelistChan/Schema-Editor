{"ast":null,"code":"var ace = require('brace');\n\nrequire('brace/mode/json');\n\nfunction run(options) {\n  var editor, mockEditor, rhymeCompleter;\n\n  function handleJson(json) {\n    var curData = mockEditor.curData;\n\n    try {\n      curData.text = json;\n      var obj = JSON.parse(json);\n      curData.format = true;\n      curData.jsonData = obj;\n    } catch (e) {\n      curData.format = e.message;\n    }\n  }\n\n  options = options || {};\n  var container, data;\n  container = options.container || 'mock-editor'; // if (options.wordList && typeof options.wordList === 'object' && options.wordList.name && options.wordList.mock) {\n  //   wordList.push(options.wordList);\n  // }\n\n  data = options.data || '';\n  options.readOnly = options.readOnly || false;\n  options.fullScreen = options.fullScreen || false;\n  editor = ace.edit(container);\n  editor.$blockScrolling = Infinity;\n  editor.getSession().setMode('ace/mode/json');\n\n  if (options.readOnly === true) {\n    editor.setReadOnly(true);\n    editor.renderer.$cursorLayer.element.style.display = \"none\";\n  }\n\n  editor.setOptions({\n    useWorker: true\n  });\n  editor._fullscreen_yapi = options.fullScreen;\n  mockEditor = {\n    curData: {},\n    getValue: () => mockEditor.curData.text,\n    setValue: function (data) {\n      editor.setValue(handleData(data));\n    },\n    editor: editor,\n    options: options,\n    insertCode: code => {\n      let pos = editor.selection.getCursor();\n      editor.session.insert(pos, code);\n    }\n  };\n\n  function handleData(data) {\n    data = data || '';\n\n    if (typeof data === 'string') {\n      return data;\n    } else if (typeof data === 'object') {\n      return JSON.stringify(data, null, \"  \");\n    }\n  }\n\n  mockEditor.setValue(handleData(data));\n  handleJson(editor.getValue());\n  editor.clearSelection();\n  editor.getSession().on('change', () => {\n    handleJson(editor.getValue());\n\n    if (typeof options.onChange === 'function') {\n      options.onChange.call(mockEditor, mockEditor.curData);\n    }\n\n    editor.clearSelection();\n  });\n  return mockEditor;\n}\n\nmodule.exports = run;","map":{"version":3,"sources":["/Users/novelistchan/Documents/sddm-component/json-schema-editor/src/components/editor/components/AceEditor/mockEditor.js"],"names":["ace","require","run","options","editor","mockEditor","rhymeCompleter","handleJson","json","curData","text","obj","JSON","parse","format","jsonData","e","message","container","data","readOnly","fullScreen","edit","$blockScrolling","Infinity","getSession","setMode","setReadOnly","renderer","$cursorLayer","element","style","display","setOptions","useWorker","_fullscreen_yapi","getValue","setValue","handleData","insertCode","code","pos","selection","getCursor","session","insert","stringify","clearSelection","on","onChange","call","module","exports"],"mappings":"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","sourcesContent":["var ace = require('brace');\nrequire('brace/mode/json');\n\n\nfunction run(options) {\n  var editor,\n    mockEditor,\n    rhymeCompleter;\n  function handleJson(json) {\n    var curData = mockEditor.curData;\n    try {\n      curData.text = json;\n      var obj = JSON.parse(json);\n      curData.format = true;\n      curData.jsonData = obj;      \n    } catch (e) {\n      curData.format = e.message;\n    }\n  }\n  options = options || {};\n  var container, data;\n  container = options.container || 'mock-editor';\n  // if (options.wordList && typeof options.wordList === 'object' && options.wordList.name && options.wordList.mock) {\n  //   wordList.push(options.wordList);\n  // }\n  data = options.data || '';\n  options.readOnly = options.readOnly || false;\n  options.fullScreen = options.fullScreen || false;\n\n  editor = ace.edit(container)\n  editor.$blockScrolling = Infinity;\n  editor.getSession().setMode('ace/mode/json');\n  if (options.readOnly === true) {\n    editor.setReadOnly(true);\n    editor.renderer.$cursorLayer.element.style.display = \"none\";\n  }\n  editor.setOptions({\n    useWorker: true\n  });\n  editor._fullscreen_yapi = options.fullScreen;\n  mockEditor = {\n    curData: {},\n    getValue: ()=>mockEditor.curData.text,\n    setValue: function (data) {\n        editor.setValue(handleData(data));\n    },\n    editor: editor,\n    options: options,\n    insertCode: (code)=>{\n      let pos = editor.selection.getCursor()\n      editor.session.insert(pos, code)\n    }\n  }\n\n  function handleData(data){\n    data = data || '';\n    if(typeof data === 'string'){\n      return data;\n    }else if (typeof data === 'object') {\n      return JSON.stringify(data, null, \"  \")\n    }\n  }\n\n  mockEditor.setValue(handleData(data));\n  handleJson(editor.getValue())\n\n  editor.clearSelection();\n\n  editor.getSession().on('change', () => {\n    handleJson(editor.getValue())\n    if (typeof options.onChange === 'function') {\n      options.onChange.call(mockEditor, mockEditor.curData);\n    }\n    editor.clearSelection();\n\n  });\n\n  return mockEditor;\n}\n\nmodule.exports = run;\n"]},"metadata":{},"sourceType":"module"}